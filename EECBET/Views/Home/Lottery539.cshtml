@{
    ViewBag.Title = "四星彩投注";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
    body {
        background: linear-gradient(135deg, #0a1f0a 0%, #1a3d1a 50%, #0d2d0d 100%);
        color: #ffffff;
        font-family: 'Microsoft JhengHei', sans-serif;
        min-height: 100vh;
    }

    .container {
        background: rgba(0, 0, 0, 0.4);
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.5);
        border: 2px solid rgba(0, 255, 0, 0.3);
    }

    h4 {
        color: #00ff00;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.2rem;
        text-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
    }

    .card {
        background: rgba(0, 0, 0, 0.6);
        border: 2px solid rgba(0, 255, 0, 0.4);
        color: #ffffff;
        border-radius: 15px;
    }

    .card-header {
        background: linear-gradient(135deg, #004d00 0%, #00aa00 50%, #004d00 100%);
        color: #ffffff;
        border-radius: 15px 15px 0 0;
        padding: 18px 25px;
    }

    .number-btn {
        width: 50px;
        height: 50px;
        border-radius: 10px;
        margin: 3px;
        background: linear-gradient(135deg, #1a3d1a 0%, #2d5a2d 100%);
        color: #00ff00;
        border: 2px solid #004d00;
        transition: all 0.3s ease;
    }

    .number-btn:hover {
        background: linear-gradient(135deg, #00aa00 0%, #00ff00 100%);
        border-color: #00ff00;
        color: #000000;
        transform: scale(1.1);
    }

    .number-btn.selected {
        background: linear-gradient(135deg, #ff6600 0%, #ff9900 100%);
        color: #000000;
        border-color: #ff6600;
        transform: scale(1.05);
    }

    .number-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
        max-width: 320px;
        margin: 10px;
        padding: 20px;
    }

    .btn-warning {
        background: linear-gradient(135deg, #ff6600 0%, #ff9900 100%);
        border: none;
        color: #000000;
        font-weight: 700;
        padding: 18px 35px;
        font-size: 1.2rem;
        margin: 30px 0;
        display: block;
        width: 100%;
        border-radius: 12px;
    }

    .btn-warning:hover {
        background: linear-gradient(135deg, #ff9900 0%, #ffcc00 100%);
        color: #000000;
        transform: translateY(-3px);
    }

    table.table {
        color: #ffffff;
        background: rgba(0, 0, 0, 0.4);
        text-align: center;
        border: 1px solid rgba(0, 255, 0, 0.3);
        border-radius: 8px;
    }

    table.table th,
    table.table td {
        text-align: center;
        vertical-align: middle;
        padding: 12px 8px;
        background: rgba(0, 0, 0, 0.6);
        border: 1px solid rgba(0, 255, 0, 0.2);
        color: #ffffff;
    }

    table thead {
        background: linear-gradient(135deg, #004d00 0%, #00aa00 100%);
        color: #ffffff;
        font-weight: 700;
    }

    #countdown {
        font-weight: 900;
        color: #ff6600;
        font-size: 1.4rem;
        background: rgba(255, 102, 0, 0.1);
        padding: 12px 20px;
        border-radius: 10px;
        border: 2px solid rgba(255, 102, 0, 0.4);
        margin-top: 25px;
        display: inline-block;
    }

    #serverResult {
        white-space: pre-line;
        color: #00ff00;
        background: rgba(0, 255, 0, 0.1);
        padding: 20px;
        border-radius: 10px;
        border-left: 4px solid #00ff00;
        margin-top: 20px;
    }

    #historyTable tbody {
        display: block;
        max-height: 280px;
        overflow-y: auto;
        border-radius: 8px;
    }

    #historyTable thead, #historyTable tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    #tipOpening {
        color: #ff0000;
        font-weight: 900;
        display: none;
        font-size: 1.2rem;
        background: rgba(255, 0, 0, 0.1);
        padding: 8px 15px;
        border-radius: 8px;
        border: 2px solid rgba(255, 0, 0, 0.4);
    }

    input[type="number"] {
        background: rgba(0, 0, 0, 0.4);
        border: 2px solid rgba(0, 255, 0, 0.4);
        color: #00ff00;
        padding: 10px 15px;
        border-radius: 8px;
    }

    input[type="number"]:focus {
        outline: none;
        border-color: #00ff00;
        box-shadow: 0 0 15px rgba(0, 255, 0, 0.4);
    }

    .btn-outline-primary, .btn-outline-secondary {
        border-radius: 8px;
        padding: 10px 20px;
        transition: all 0.3s ease;
        border-width: 2px;
    }

    .btn-outline-primary {
        color: #00ff00;
        border-color: #00ff00;
        background: transparent;
    }

    .btn-outline-primary:hover {
        background: #00ff00;
        color: #000000;
    }

    .btn-outline-secondary {
        color: #888888;
        border-color: #888888;
        background: transparent;
    }

    .btn-outline-secondary:hover {
        background: #888888;
        color: #000000;
    }

    label {
        color: #00ff00;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .btn-sm {
        padding: 8px 16px;
        font-size: 0.9rem;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-outline-primary {
        color: #00ff00;
        border-color: #00ff00;
        background: transparent;
    }

    .btn-outline-primary:hover {
        background: #00ff00;
        color: #000000;
        transform: translateY(-1px);
    }

    .btn-outline-secondary {
        color: #888888;
        border-color: #888888;
        background: transparent;
    }

    .btn-outline-secondary:hover {
        background: #888888;
        color: #000000;
        transform: translateY(-1px);
    }

    .back-button {
        background: linear-gradient(135deg, #666666 0%, #888888 100%);
        border: 2px solid #555555;
        color: #ffffff;
        padding: 10px 20px;
        border-radius: 10px;
        text-decoration: none;
        transition: all 0.3s ease;
        display: inline-block;
        margin-bottom: 20px;
    }

    .back-button:hover {
        background: linear-gradient(135deg, #888888 0%, #aaaaaa 100%);
        color: #ffffff;
        text-decoration: none;
        transform: translateY(-2px);
    }
</style>

<div class="container mt-4">
    <a href="@Url.Action("LotteryMenu", "Home")" class="back-button">← 返回彩票選單</a>
    
    <h4>🎯 四星彩投注開獎器</h4>
    
    
    
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <div>請選號碼（最多 25 個號碼）</div>
                    <div>
                        <input type="number" id="randomCount" value="5" min="1" max="25" style="width:64px;" />
                        <button class="btn btn-sm btn-outline-primary" id="btnRandom">隨機選號</button>
                        <button class="btn btn-sm btn-outline-secondary" id="btnClear">清除</button>
                    </div>
                </div>
                <div class="card-body number-grid" id="numberGrid">
                    @for (int i = 1; i <= 39; i++)
                    {
                        <button type="button" class="number-btn" data-number="@i">@i.ToString("D2")</button>
                    }
                </div>
            </div>
        </div>
        <div class="col-md">
            <div class="card mb-3">
                <div class="card-header">投注設定</div>
                <div class="card-body">
                    <div>已選號碼：<span id="selectedNumbers"></span></div>
                    <div>
                        <label>二星：</label>
                        <span id="count2">0</span> 組
                        每組金額：<input type="number" id="bet2" value="0" step="10" min="0" />
                    </div>
                    <div>
                        <label>三星：</label>
                        <span id="count3">0</span> 組
                        每組金額：<input type="number" id="bet3" value="0" step="10" min="0" />
                    </div>
                    <div>
                        <label>四星：</label>
                        <span id="count4">0</span> 組
                        每組金額：<input type="number" id="bet4" value="0" step="10" min="0" />
                    </div>
                    <hr />
                    <div>共選 <span id="totalCount">0</span> 球，總金額：<span id="totalAmount">0</span> 元</div>
                    <button class="btn btn-warning" id="submitBet">立即投注</button>
                    <div>距離下次開獎：<span id="countdown">00:30</span></div>
                    <div id="tipOpening">即將開獎！</div>
                    <div id="serverResult" class="mt-2"></div>
                </div>
            </div>
            <div class="card">
                <div class="card-header">開獎紀錄</div>
                <div class="card-body">
                    <table class="table table-sm" id="historyTable">
                        <thead>
                            <tr>
                                <th>期數</th>
                                <th>開獎號碼</th>
                                <th>開獎時間</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    let selectedNumbers = [];
    const INTERVAL_SEC = 30;
    let countdownSec = INTERVAL_SEC;
    let hasBetThisRound = false;
    let currentBetPayload = null;

    function updateUI() {
        $('#selectedNumbers').text(selectedNumbers.join(', '));
        const c = selectedNumbers.length;
        $('#count2').text(c >= 2 ? combination(c, 2) : 0);
        $('#count3').text(c >= 3 ? combination(c, 3) : 0);
        $('#count4').text(c >= 4 ? combination(c, 4) : 0);
        updateTotalAmount();
        highlightSelectedButtons();
        $('#totalCount').text(c);
    }

    function combination(n, k) {
        if (n < k) return 0;
        let num = 1, denom = 1;
        for (let i = 0; i < k; i++) {
            num *= (n - i);
            denom *= (i + 1);
        }
        return num / denom;
    }

    function updateTotalAmount() {
        const bet2 = parseInt($('#bet2').val()) || 0;
        const bet3 = parseInt($('#bet3').val()) || 0;
        const bet4 = parseInt($('#bet4').val()) || 0;
        const count2 = parseInt($('#count2').text()) || 0;
        const count3 = parseInt($('#count3').text()) || 0;
        const count4 = parseInt($('#count4').text()) || 0;
        $('#totalAmount').text(count2 * bet2 + count3 * bet3 + count4 * bet4);
    }

    function highlightSelectedButtons() {
        $('.number-btn').each(function () {
            let num = parseInt($(this).data('number'));
            $(this).toggleClass('selected', selectedNumbers.includes(num));
        });
    }

    $(document).on('click', '.number-btn', function () {
        let num = parseInt($(this).data('number'));
        const idx = selectedNumbers.indexOf(num);
        if (idx >= 0) {
            selectedNumbers.splice(idx, 1);
        } else {
            if (selectedNumbers.length >= 25) {
                alert('最多選25號');
                return;
            }
            selectedNumbers.push(num);
        }
        selectedNumbers.sort((a, b) => a - b);
        updateUI();
    });

    $('#btnClear').click(() => {
        selectedNumbers = [];
        updateUI();
    });

    $('#btnRandom').click(() => {
        const want = parseInt($('#randomCount').val()) || 5;
        const available = [];
        for (let i = 1; i <= 39; i++) {
            if (!selectedNumbers.includes(i)) available.push(i);
        }
        let pick = Math.min(want, 25 - selectedNumbers.length, available.length);
        while (pick > 0) {
            const idx = Math.floor(Math.random() * available.length);
            selectedNumbers.push(available[idx]);
            available.splice(idx, 1);
            pick--;
        }
        selectedNumbers.sort((a, b) => a - b);
        updateUI();
    });

    $('#bet2,#bet3,#bet4').on('input', updateTotalAmount);

    $('#submitBet').click(() => {
        @if (User.Identity?.IsAuthenticated != true)
        {
            @:alert('請先登入才能進行投注');
            @:return;
        }
        else
        {
            @:if (selectedNumbers.length < 2) {
            @:    alert('至少選 2 號');
            @:    return;
            @:}
            @:const total = parseInt($('#totalAmount').text());
            @:if (total <= 0) {
            @:    alert('請輸入投注金額');
            @:    return;
            @:}
            @:hasBetThisRound = true;
            @:currentBetPayload = {
            @:    Numbers: selectedNumbers,
            @:    Bet2: parseInt($('#bet2').val()),
            @:    Bet3: parseInt($('#bet3').val()),
            @:    Bet4: parseInt($('#bet4').val()),
            @:    TotalAmount: total
            @:};
            @:$('#serverResult').text('您已投注成功，本期開獎後會顯示結果');
        }
    });

    function countdownTick() {
        countdownSec--;
        let m = Math.floor(countdownSec / 60), s = countdownSec % 60;
        $('#countdown').text(`${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`);

        if (countdownSec <= 3 && countdownSec > 0) {
            $('#tipOpening').show();
        } else {
            $('#tipOpening').hide();
        }

        if (countdownSec <= 0) {
            doDraw();
            countdownSec = INTERVAL_SEC;
        }
    }

    function doDraw() {
        let payload = hasBetThisRound && currentBetPayload != null
            ? currentBetPayload
            : { Numbers: [] };

        $.ajax({
            url: '/Bet/SubmitBet',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(payload),
            success: data => {
                renderResult(data);
            },
            error: err => {
                console.error('開獎呼叫錯誤', err);
            },
            complete: () => {
                hasBetThisRound = false;
                currentBetPayload = null;
            }
        });
    }

    function renderResult(data) {
        if (!data.success) {
            $('#serverResult').text('錯誤：' + data.message);
            return;
        }
        
        let html = `期數: ${data.issueNo}  開獎號碼: ${data.drawNumbers.join(', ')}\n`;
        if (data.wins && data.wins.length > 0) {
            data.wins.forEach(w => {
                html += `${w.type}星: 中 ${w.winningGroups} 組  總派彩 ${w.totalPayout} 元\n`;
            });
            html += `總派彩: ${data.totalPayout} 元\n`;
        } else {
            html += '未中獎\n';
        }
        
        @if (User.Identity?.IsAuthenticated == true)
        {
            @:html += `投注金額: ${data.betAmount} 元\n`;
            @:html += `新餘額: ${data.newBalance} 元`;
            @:// 更新餘額顯示
            @:if (data.newBalance !== undefined) {
            @:    $('#userBalance').text('$' + parseFloat(data.newBalance).toLocaleString('en-US', {
            @:        minimumFractionDigits: 2,
            @:        maximumFractionDigits: 2
            @:    }));
            @:}
        }
        else
        {
            @:html += '（未登入，無法投注）';
        }
        
        $('#serverResult').text(html);
    }

    function refreshHistoryFromServer() {
        $.get('/Bet/History', function (history) {
            const $tbody = $('#historyTable tbody');
            $tbody.empty();

            history.sort((a, b) => b.issueNo - a.issueNo);
            const latest20 = history.slice(0, 20);

            latest20.forEach(data => {
                const drawTime = data.drawTime || '';
                $tbody.append(`
                    <tr>
                        <td>${data.issueNo}</td>
                        <td>${data.drawNumbers.join(', ')}</td>
                        <td>${drawTime}</td>
                    </tr>
                `);
            });
        });
    }

    $(document).ready(function () {
        updateUI();
        refreshHistoryFromServer();
        setInterval(countdownTick, 1000);
        setInterval(refreshHistoryFromServer, 500);
        
        @if (User.Identity?.IsAuthenticated == true)
        {
            @:loadUserBalance();
        }
    });
    
    @if (User.Identity?.IsAuthenticated == true)
    {
        @:function loadUserBalance() {
        @:    fetch('/Account/Balance')
        @:        .then(response => response.json())
        @:        .then(data => {
        @:            if (data.success) {
        @:                $('#userBalance').text('$' + parseFloat(data.balance).toLocaleString('en-US', {
        @:                    minimumFractionDigits: 2,
        @:                    maximumFractionDigits: 2
        @:                }));
        @:            } else {
        @:                $('#userBalance').text('載入失敗');
        @:            }
        @:        })
        @:        .catch(error => {
        @:            console.error('Error loading balance:', error);
        @:            $('#userBalance').text('載入失敗');
        @:        });
        @:}
    }
</script>
